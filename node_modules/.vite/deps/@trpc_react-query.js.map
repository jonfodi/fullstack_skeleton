{
  "version": 3,
  "sources": ["../../@trpc/server/dist/observable-ade1bad8.mjs", "../../@trpc/server/dist/observable/index.mjs", "../../@trpc/client/dist/splitLink-4c75f7be.mjs", "../../@trpc/server/dist/codes-c924c3db.mjs", "../../@trpc/server/dist/index-f91d720c.mjs", "../../@trpc/server/dist/getCauseFromUnknown-2d66414a.mjs", "../../@trpc/client/dist/transformResult-ace864b8.mjs", "../../@trpc/client/dist/TRPCClientError-38f9a32a.mjs", "../../@trpc/client/dist/httpUtils-b9d0cb48.mjs", "../../@trpc/client/dist/httpBatchLink-d0f9eac9.mjs", "../../@trpc/client/dist/links/httpLink.mjs", "../../@trpc/client/dist/links/loggerLink.mjs", "../../@trpc/client/dist/links/wsLink.mjs", "../../@trpc/client/dist/index.mjs", "../../@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs", "../../@trpc/react-query/dist/createHooksInternal-063195fc.mjs", "../../@trpc/react-query/dist/index.mjs"],
  "sourcesContent": ["function identity(x) {\n    return x;\n}\n\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\n\nfunction isObservable(x) {\n    return typeof x === 'object' && x !== null && 'subscribe' in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === 'function') {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\nexport { isObservable as i, observable as o };\n", "export { i as isObservable, o as observable } from '../observable-ade1bad8.mjs';\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\n\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\n\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\n\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'ObservableAbortError';\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError('This operation was aborted.'));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\nexport { map, observableToPromise, share, tap };\n", "import { observable } from '@trpc/server/observable';\n\n/** @internal */ function createChain(opts) {\n    return observable((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error('No more links to execute - did you forget to add an ending link?');\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\n\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return observable((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\nexport { createChain as c, splitLink as s };\n", "/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\nexport { TRPC_ERROR_CODES_BY_KEY as T, TRPC_ERROR_CODES_BY_NUMBER as a, invert as i };\n", "import { i as invert, T as TRPC_ERROR_CODES_BY_KEY } from './codes-c924c3db.mjs';\n\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if ('error' in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === 'number') {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== 'string' || key === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === 'apply';\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== 'string' || name === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\nexport { TRPC_ERROR_CODES_BY_NUMBER as T, createRecursiveProxy as a, getHTTPStatusCode as b, createFlatProxy as c, getHTTPStatusCodeFromError as g };\n", "/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === 'undefined' || type === 'function' || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== 'object') {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\n\nexport { getCauseFromUnknown as g };\n", "function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if ('error' in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === 'data') && {\n            type: 'data',\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super('Unable to transform response from server');\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== 'number')) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\nexport { isObject as i, transformResult as t };\n", "import { getCauseFromUnknown } from '@trpc/server/shared';\nimport { i as isObject } from './transformResult-ace864b8.mjs';\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === 'TRPCClientError';\n}\nfunction isTRPCErrorResponse(obj) {\n    return isObject(obj) && isObject(obj.error) && typeof obj.error.code === 'number' && typeof obj.error.message === 'string';\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError('Unknown error', {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: getCauseFromUnknown(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = 'TRPCClientError';\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\nexport { TRPCClientError as T };\n", "import { T as TRPCClientError } from './TRPCClientError-38f9a32a.mjs';\n\nconst isFunction = (fn)=>typeof fn === 'function';\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (typeof window !== 'undefined' && isFunction(window.fetch)) {\n        return window.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error('No fetch implementation found');\n}\n\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof window !== 'undefined' && window.AbortController) {\n        return window.AbortController;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\n\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, ''),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: 'GET',\n    mutation: 'POST'\n};\nfunction getInput(opts) {\n    return 'input' in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + '/' + opts.path;\n    const queryParts = [];\n    if ('inputs' in opts) {\n        queryParts.push('batch=1');\n    }\n    if (opts.type === 'query') {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += '?' + queryParts.join('&');\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === 'query') {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type  } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === 'subscription') {\n        throw new Error('Subscriptions should use wsLink');\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            'content-type': opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            'trpc-batch-mode': opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(TRPCClientError.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\nexport { getBody as a, getFetch as b, fetchHTTPResponse as f, getUrl as g, httpRequest as h, jsonHttpRequester as j, resolveHTTPLinkOptions as r };\n", "import { observable } from '@trpc/server/observable';\nimport { t as transformResult } from './transformResult-ace864b8.mjs';\nimport { T as TRPCClientError } from './TRPCClientError-38f9a32a.mjs';\nimport { r as resolveHTTPLinkOptions, g as getUrl, j as jsonHttpRequester } from './httpUtils-b9d0cb48.mjs';\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error('Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new');\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error('Aborted'));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error('Input is too big for a single dispatch'));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise , cancel  } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error('Missing result'));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = resolveHTTPLinkOptions(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(',');\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = getUrl({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader('query'));\n            const mutation = dataLoader(batchLoader('mutation'));\n            const subscription = dataLoader(batchLoader('subscription'));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op  })=>{\n                return observable((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise , cancel  } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = transformResult(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(TRPCClientError.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(TRPCClientError.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\n\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise , cancel  } = jsonHttpRequester({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\nexport { createHTTPBatchLink as c, httpBatchLink as h };\n", "import { observable } from '@trpc/server/observable';\nimport { t as transformResult } from '../transformResult-ace864b8.mjs';\nimport { T as TRPCClientError } from '../TRPCClientError-38f9a32a.mjs';\nimport { r as resolveHTTPLinkOptions, j as jsonHttpRequester } from '../httpUtils-b9d0cb48.mjs';\nimport '@trpc/server/shared';\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = resolveHTTPLinkOptions(opts);\n        return (runtime)=>({ op  })=>observable((observer)=>{\n                    const { path , input , type  } = op;\n                    const { promise , cancel  } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === 'function') {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = transformResult(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(TRPCClientError.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(TRPCClientError.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: jsonHttpRequester\n});\n\nexport { httpLink, httpLinkFactory };\n", "import { observable, tap } from '@trpc/server/observable';\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === 'undefined') {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            '72e3ff',\n            '3fb0d8'\n        ],\n        mutation: [\n            'c5a3fc',\n            '904dfc'\n        ],\n        subscription: [\n            'ff49e1',\n            'd83fbe'\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                '\\x1b[30;46m',\n                '\\x1b[97;46m'\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                '\\x1b[30;45m',\n                '\\x1b[97;45m'\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                '\\x1b[30;42m',\n                '\\x1b[97;42m'\n            ]\n        },\n        bold: {\n            query: [\n                '\\x1b[1;30;46m',\n                '\\x1b[1;97;46m'\n            ],\n            mutation: [\n                '\\x1b[1;30;45m',\n                '\\x1b[1;97;45m'\n            ],\n            subscription: [\n                '\\x1b[1;30;42m',\n                '\\x1b[1;97;42m'\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction , type , path , id , input  } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === 'ansi') {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = '\\x1b[0m';\n        parts.push(direction === 'up' ? lightRegular : darkRegular, direction === 'up' ? '>>' : '<<', type, direction === 'up' ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === 'up') {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: 'result' in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === 'up' ? light : dark}; \n    color: ${direction === 'up' ? 'black' : 'white'};\n    padding: 2px;\n  `;\n    parts.push('%c', direction === 'up' ? '>>' : '<<', type, `#${id}`, `%c${path}%c`, '%O');\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === 'up') {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c =console , colorMode ='css'  })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts , args  } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === 'down' && props.result && (props.result instanceof Error || 'error' in props.result.result) ? 'error' : 'log';\n        c[fn].apply(null, [\n            parts.join(' ')\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled =()=>true  } = opts;\n    const colorMode = opts.colorMode ?? (typeof window === 'undefined' ? 'ansi' : 'css');\n    const { logger =defaultLogger({\n        c: opts.console,\n        colorMode\n    })  } = opts;\n    return ()=>{\n        return ({ op , next  })=>{\n            return observable((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: 'up'\n                }) && logger({\n                    ...op,\n                    direction: 'up'\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: 'down',\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: 'down',\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe(tap({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\nexport { loggerLink };\n", "import { observable } from '@trpc/server/observable';\nimport { t as transformResult } from '../transformResult-ace864b8.mjs';\nimport { T as TRPCClientError } from '../TRPCClientError-38f9a32a.mjs';\nimport '@trpc/server/shared';\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\n\nfunction createWSClient(opts) {\n    const { url , WebSocket: WebSocketImpl = WebSocket , retryDelayMs: retryDelayFn = retryDelay , onOpen , onClose ,  } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = 'connecting';\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== 'open' || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === 'closed') {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = 'connecting';\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = 'connecting';\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === 'subscription') {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === 'function' ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener('open', ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = 'open';\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener('error', ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === 'reconnect' && conn === activeConnection) {\n                if (state === 'open') {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === 'subscription') {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if ('result' in data && data.result.type === 'stopped' && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener('message', ({ data  })=>{\n            const msg = JSON.parse(data);\n            if ('method' in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === 'closed') {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener('close', ({ code  })=>{\n            if (state === 'open') {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === 'closed') {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === 'subscription') {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(TRPCClientError.from(new TRPCWebSocketClosedError('WebSocket closed prematurely')));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type , input , path , id  } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === 'subscription') {\n                outgoing.push({\n                    id,\n                    method: 'subscription.stop'\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = 'closed';\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'TRPCWebSocketClosedError';\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client  } = opts;\n        return ({ op  })=>{\n            return observable((observer)=>{\n                const { type , path , id , context  } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = transformResult(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(TRPCClientError.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== 'subscription') {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\nexport { createWSClient, wsLink };\n", "import { share, observableToPromise } from '@trpc/server/observable';\nimport { c as createChain } from './splitLink-4c75f7be.mjs';\nexport { s as splitLink } from './splitLink-4c75f7be.mjs';\nimport { T as TRPCClientError } from './TRPCClientError-38f9a32a.mjs';\nexport { T as TRPCClientError } from './TRPCClientError-38f9a32a.mjs';\nimport { createFlatProxy, createRecursiveProxy } from '@trpc/server/shared';\nimport { f as fetchHTTPResponse, g as getUrl, a as getBody$1, h as httpRequest } from './httpUtils-b9d0cb48.mjs';\nexport { b as getFetch } from './httpUtils-b9d0cb48.mjs';\nimport { c as createHTTPBatchLink } from './httpBatchLink-d0f9eac9.mjs';\nexport { h as httpBatchLink } from './httpBatchLink-d0f9eac9.mjs';\nimport { httpLinkFactory } from './links/httpLink.mjs';\nexport { httpLink, httpLinkFactory } from './links/httpLink.mjs';\nexport { loggerLink } from './links/loggerLink.mjs';\nexport { createWSClient, wsLink } from './links/wsLink.mjs';\nimport './transformResult-ace864b8.mjs';\n\nclass TRPCUntypedClient {\n    $request({ type , input , path , context ={}  }) {\n        const chain$ = createChain({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe(share());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise , abort  } = observableToPromise(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener('abort', abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(TRPCClientError.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'query',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'mutation',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: 'subscription',\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === 'started') {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === 'stopped') {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if ('input' in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\n\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\n\nconst clientCallTypeMap = {\n    query: 'query',\n    mutate: 'mutation',\n    subscribe: 'subscription'\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return createFlatProxy((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === '__untypedClient') {\n            return client;\n        }\n        return createRecursiveProxy(({ path , args  })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join('.');\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\n\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof window !== 'undefined' && window.TextDecoder) {\n        return new window.TextDecoder();\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error('No TextDecoder implementation found');\n}\n\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === '}') {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(':');\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = '';\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split('\\n');\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if ('getReader' in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on('data', onChunk);\n        stream.on('end', resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = fetchHTTPResponse({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        batchModeHeader: 'stream',\n        getUrl,\n        getBody: getBody$1\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error('Received response without body');\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\n\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel , promise  } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = createHTTPBatchLink(streamRequester);\n\nconst getBody = (opts)=>{\n    if (!('input' in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error('Input is not FormData');\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== 'mutation') {\n        // TODO(?) handle formdata queries\n        throw new Error('We only handle mutations with formdata');\n    }\n    return httpRequest({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = httpLinkFactory({\n    requester: formDataRequester\n});\n\nexport { TRPCUntypedClient, clientCallTypeToProcedureType, createTRPCClient, createTRPCClientProxy, createTRPCProxyClient, createTRPCUntypedClient, experimental_formDataLink, getUntypedClient, unstable_httpBatchStreamLink };\n", "/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === 'any')) // for `utils.invalidate()` to match all queries (including vanilla react-query)\n    // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== 'undefined' && {\n                input: input\n            },\n            ...type && type !== 'any' && {\n                type: type\n            }\n        }\n    ];\n}\n\nexport { getArrayQueryKey as g };\n", "import { createRecursiveProxy, createFlatProxy } from '@trpc/server/shared';\nimport { g as getArrayQueryKey } from './getArrayQueryKey-86134f8b.mjs';\nimport { createTRPCClientProxy, createTRPCClient } from '@trpc/client';\nimport { useQuery, useQueryClient, useMutation, hashQueryKey, useInfiniteQuery, useQueries } from '@tanstack/react-query';\nimport React, { createContext, useMemo, useState, useEffect, useCallback, useRef } from 'react';\n\n/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */ function getQueryKeyInternal(path, input) {\n    if (path.length) return input === undefined ? [\n        path\n    ] : [\n        path,\n        input\n    ];\n    return [];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const dotPath = path.join('.');\n    const queryKey = getArrayQueryKey(getQueryKeyInternal(dotPath, input), type ?? 'any');\n    return queryKey;\n}\n\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactProxyDecoration(name, hooks) {\n    return createRecursiveProxy((opts)=>{\n        const args = opts.args;\n        const pathCopy = [\n            name,\n            ...opts.path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        // The `path` ends up being something like `post.byId`\n        const path = pathCopy.join('.');\n        if (lastArg === 'useMutation') {\n            return hooks[lastArg](path, ...args);\n        }\n        const [input, ...rest] = args;\n        const queryKey = getQueryKeyInternal(path, input);\n        // Expose queryKey helper\n        if (lastArg === 'getQueryKey') {\n            return getArrayQueryKey(queryKey, rest[0] ?? 'any');\n        }\n        if (lastArg === '_def') {\n            return {\n                path: pathCopy\n            };\n        }\n        if (lastArg.startsWith('useSuspense')) {\n            const opts1 = rest[0] || {};\n            const fn = lastArg === 'useSuspenseQuery' ? 'useQuery' : 'useInfiniteQuery';\n            const result = hooks[fn](queryKey, {\n                ...opts1,\n                suspense: true,\n                enabled: true\n            });\n            return [\n                result.data,\n                result\n            ];\n        }\n        return hooks[lastArg](queryKey, ...rest);\n    });\n}\n\nconst contextProps = [\n    'client',\n    'ssrContext',\n    'ssrState',\n    'abortOnUnmount'\n];\nconst TRPCContext = /*#__PURE__*/ createContext(null);\n\n/**\n * @internal\n */ function createReactQueryUtilsProxy(context) {\n    return createFlatProxy((key)=>{\n        const contextName = key;\n        if (contextName === 'client') {\n            return createTRPCClientProxy(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return createRecursiveProxy(({ path , args  })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join('.');\n            const getOpts = (name)=>{\n                if ([\n                    'setData',\n                    'setInfiniteData'\n                ].includes(name)) {\n                    const [input, updater, ...rest] = args;\n                    const queryKey = getQueryKeyInternal(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest\n                    };\n                }\n                const [input1, ...rest1] = args;\n                const queryKey1 = getQueryKeyInternal(fullPath, input1);\n                return {\n                    queryKey: queryKey1,\n                    rest: rest1\n                };\n            };\n            const { queryKey , rest , updater  } = getOpts(utilName);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...rest),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),\n                reset: ()=>context.resetQueries(queryKey, ...rest),\n                refetch: ()=>context.refetchQueries(queryKey, ...rest),\n                cancel: ()=>context.cancelQuery(queryKey, ...rest),\n                setData: ()=>{\n                    context.setQueryData(queryKey, updater, ...rest);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, updater, ...rest);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueriesProxy(client) {\n    return createRecursiveProxy((opts)=>{\n        const path = opts.path.join('.');\n        const [input, _opts] = opts.args;\n        const queryKey = getQueryKeyInternal(path, input);\n        const options = {\n            queryKey,\n            queryFn: ()=>{\n                return client.query(path, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\n\nfunction getClientArgs(pathAndInput, opts) {\n    const [path, input] = pathAndInput;\n    return [\n        path,\n        input,\n        opts?.trpc\n    ];\n}\n\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const { path  } = value;\n    return useMemo(()=>({\n            path\n        }), [\n        path\n    ]);\n}\n\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = (config?.overrides ?? config?.unstable_overrides)?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? TRPCContext;\n    const ReactQueryContext = config?.reactQueryContext;\n    const createClient = (opts)=>{\n        return createTRPCClient(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount =false , client , queryClient , ssrContext  } = props;\n        const [ssrState, setSSRState] = useState(props.ssrState ?? false);\n        useEffect(()=>{\n            // Only updating state to `mounted` if we are using SSR.\n            // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n            setSSRState((state)=>state ? 'mounted' : false);\n        }, []);\n        return /*#__PURE__*/ React.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: useCallback((pathAndInput, opts)=>{\n                    return queryClient.fetchQuery({\n                        ...opts,\n                        queryKey: getArrayQueryKey(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: useCallback((pathAndInput, opts)=>{\n                    return queryClient.fetchInfiniteQuery({\n                        ...opts,\n                        queryKey: getArrayQueryKey(pathAndInput, 'infinite'),\n                        queryFn: ({ pageParam  })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: useCallback((pathAndInput, opts)=>{\n                    return queryClient.prefetchQuery({\n                        ...opts,\n                        queryKey: getArrayQueryKey(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: useCallback((pathAndInput, opts)=>{\n                    return queryClient.prefetchInfiniteQuery({\n                        ...opts,\n                        queryKey: getArrayQueryKey(pathAndInput, 'infinite'),\n                        queryFn: ({ pageParam  })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: useCallback((pathAndInput, opts)=>{\n                    return queryClient.ensureQueryData({\n                        ...opts,\n                        queryKey: getArrayQueryKey(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: useCallback((queryKey, filters, options)=>{\n                    return queryClient.invalidateQueries({\n                        ...filters,\n                        queryKey: getArrayQueryKey(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                resetQueries: useCallback((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.resetQueries({\n                        ...filters,\n                        queryKey: getArrayQueryKey(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                refetchQueries: useCallback((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.refetchQueries({\n                        ...filters,\n                        queryKey: getArrayQueryKey(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                cancelQuery: useCallback((pathAndInput)=>{\n                    return queryClient.cancelQueries({\n                        queryKey: getArrayQueryKey(pathAndInput, 'any')\n                    });\n                }, [\n                    queryClient\n                ]),\n                setQueryData: useCallback((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData(getArrayQueryKey(queryKey, 'query'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getQueryData: useCallback((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData(getArrayQueryKey(queryKey, 'query'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                setInfiniteQueryData: useCallback((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData(getArrayQueryKey(queryKey, 'infinite'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getInfiniteQueryData: useCallback((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData(getArrayQueryKey(queryKey, 'infinite'), ...rest);\n                }, [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        return React.useContext(Context);\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(pathAndInput, type, opts) {\n        const { queryClient , ssrState  } = useContext();\n        return ssrState && ssrState !== 'mounted' && queryClient.getQueryCache().find(getArrayQueryKey(pathAndInput, type))?.state.status === 'error' ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(// FIXME path should be a tuple in next major\n    pathAndInput, opts) {\n        const context = useContext();\n        if (!context) {\n            throw new Error('Unable to retrieve application context. Did you forget to wrap your App inside `withTRPC` HoC?');\n        }\n        const { abortOnUnmount , client , ssrState , queryClient , prefetchQuery  } = context;\n        const defaultOpts = queryClient.getQueryDefaults(getArrayQueryKey(pathAndInput, 'query'));\n        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find(getArrayQueryKey(pathAndInput, 'query'))) {\n            void prefetchQuery(pathAndInput, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'query', {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = useQuery({\n            ...ssrOpts,\n            queryKey: getArrayQueryKey(pathAndInput, 'query'),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(pathAndInput, actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path: pathAndInput[0]\n        });\n        return hook;\n    }\n    function useMutation$1(// FIXME: this should only be a tuple path in next major\n    path, opts) {\n        const { client  } = useContext();\n        const queryClient = useQueryClient({\n            context: ReactQueryContext\n        });\n        const actualPath = Array.isArray(path) ? path[0] : path;\n        const defaultOpts = queryClient.getMutationDefaults([\n            actualPath.split('.')\n        ]);\n        const hook = useMutation({\n            ...opts,\n            mutationKey: [\n                actualPath.split('.')\n            ],\n            mutationFn: (input)=>{\n                return client.mutation(...getClientArgs([\n                    actualPath,\n                    input\n                ], opts));\n            },\n            context: ReactQueryContext,\n            onSuccess (...args) {\n                const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        });\n        hook.trpc = useHookResult({\n            path: actualPath\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(pathAndInput, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = hashQueryKey(pathAndInput);\n        const { client  } = useContext();\n        const optsRef = useRef(opts);\n        optsRef.current = opts;\n        useEffect(()=>{\n            if (!enabled) {\n                return;\n            }\n            const [path, input] = pathAndInput;\n            let isStopped = false;\n            const subscription = client.subscription(path, input ?? undefined, {\n                onStarted: ()=>{\n                    if (!isStopped) {\n                        optsRef.current.onStarted?.();\n                    }\n                },\n                onData: (data)=>{\n                    if (!isStopped) {\n                        // FIXME this shouldn't be needed as both should be `unknown` in next major\n                        optsRef.current.onData(data);\n                    }\n                },\n                onError: (err)=>{\n                    if (!isStopped) {\n                        optsRef.current.onError?.(err);\n                    }\n                }\n            });\n            return ()=>{\n                isStopped = true;\n                subscription.unsubscribe();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(pathAndInput, opts) {\n        const [path, input] = pathAndInput;\n        const { client , ssrState , prefetchInfiniteQuery , queryClient , abortOnUnmount ,  } = useContext();\n        const defaultOpts = queryClient.getQueryDefaults(getArrayQueryKey(pathAndInput, 'infinite'));\n        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find(getArrayQueryKey(pathAndInput, 'infinite'))) {\n            void prefetchInfiniteQuery(pathAndInput, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'infinite', {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = useInfiniteQuery({\n            ...ssrOpts,\n            queryKey: getArrayQueryKey(pathAndInput, 'infinite'),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                const actualInput = {\n                    ...input ?? {},\n                    cursor: queryFunctionContext.pageParam ?? opts?.initialCursor\n                };\n                // FIXME as any shouldn't be needed as client should be untyped too\n                return client.query(...getClientArgs([\n                    path,\n                    actualInput\n                ], actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const useQueries$1 = (queriesCallback, context)=>{\n        const { ssrState , queryClient , prefetchQuery , client  } = useContext();\n        const proxy = createUseQueriesProxy(client);\n        const queries = queriesCallback(proxy);\n        if (typeof window === 'undefined' && ssrState === 'prepass') {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find(getArrayQueryKey(queryOption.queryKey, 'query'))) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return useQueries({\n            queries: queries.map((query)=>({\n                    ...query,\n                    queryKey: getArrayQueryKey(query.queryKey, 'query')\n                })),\n            context\n        });\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = useMemo(()=>{\n            if (!trpcState) {\n                return trpcState;\n            }\n            return client.runtime.transformer.deserialize(trpcState);\n        }, [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1\n    };\n}\n\n/**\n * Create strongly typed react hooks\n * @internal\n * @deprecated\n */ function createHooksInternal(config) {\n    return createRootHooks(config);\n}\n\nexport { TRPCContext as T, createReactQueryUtilsProxy as a, createReactProxyDecoration as b, createHooksInternal as c, getClientArgs as d, createUseQueriesProxy as e, createRootHooks as f, getQueryKey as g, contextProps as h };\n", "export * from '@trpc/client';\nimport { c as createHooksInternal, a as createReactQueryUtilsProxy, b as createReactProxyDecoration } from './createHooksInternal-063195fc.mjs';\nexport { g as getQueryKey } from './createHooksInternal-063195fc.mjs';\nimport { createFlatProxy } from '@trpc/server/shared';\nimport { useMemo } from 'react';\nimport '@tanstack/react-query';\nimport './getArrayQueryKey-86134f8b.mjs';\n\n/**\n * @internal\n */ function createHooksInternalProxy(trpc) {\n    return createFlatProxy((key)=>{\n        if (key === 'useContext' || key === 'useUtils') {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return useMemo(()=>{\n                    return createReactQueryUtilsProxy(context);\n                }, [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return createReactProxyDecoration(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = createHooksInternal(opts);\n    const proxy = createHooksInternalProxy(hooks);\n    return proxy;\n}\n\n// interop:\n/**\n * @deprecated use `createTRPCReact` instead\n */ function createReactQueryHooks(opts) {\n    const trpc = createHooksInternal(opts);\n    const proxy = createHooksInternalProxy(trpc);\n    return {\n        ...trpc,\n        proxy\n    };\n}\n\nexport { createReactQueryHooks, createTRPCReact };\n"],
  "mappings": "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",
  "names": ["observable", "TRPC_ERROR_CODES_BY_NUMBER", "isObject", "isObject", "item", "httpBatchLink", "callbacks", "getBody", "updater", "rest", "queryKey", "React", "_a", "_b", "import_react"]
}
